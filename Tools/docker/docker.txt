# instalar docker linux (fedora)
dnf install docker-ce
ou
baixar o rpm no site: https://www.docker.com/community-edition
cd ~/Downloads/
dnf -y install docker-ce-17.06.0.ce-1.fc24.x86_64.rpm

# instalar docker linux (ubuntu)
Link: https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-pt

# ver a versao do docker
docker -v

# habilitar docker (fedora)
systemctl enable docker

# Gerenciar Docker no Debian do WSL do Windows
sudo service docker status 
sudo service docker start 
sudo service docker stop 
sudo service docker restart 

# listar comandos
docker image --help
docker container --help
docker volume --help

# fazer login no docker
docker login -u <nome_usuario>

Trabalhando com imagens

# baixar imagem do docker
docker image pull <nome_imagem>:<versao>
exemplo: nginx:1.13, mongo:3.2 , node:8.1

# copiar imagem existente
docker image tag <nome_imagem>:<versao> <nome_nova_imagem>

# carregar imagem (aprender a gerar docker_system.tar)
docker load -i docker_system.tar

# listar imagens
docker images
docker images ls
docker images list

# inspecionar imagem
docker image inspect <nome_imagem>

# remover imagem
docker rmi <imagem_nome> ou <imagem_id>
docker image rm <imagem_nome> ou <imagem_id>

# criar imagem com Dockerfile
mkdir teste
cd teste
touch Dockerfile
////////////////
FROM nginx:1.13
RUN echo '<h1>Olá mundo!</h1>' > /usr/share/nginx/html/index.html
////////////////
docker image build -t <nome_imagem> </caminho_para_o_Dockerfile>

# publicar imagem (docker hub ou local)
docker image push

Trabalhando com containers

# criar container
docker container run -d (modo daemon) --name <nome_container> <nome_imagem> sleep 1000 

# listar containers ativos
docker container ls
docker container list
docker container ps

# listar todos os containers
docker container ls -a
docker container list -a
docker container ps -a

# iniciar/restart/encerrar container
docker container start <nome_container>
docker container restart <nome_container>
docker container stop <nome_container>

# acessar container
docker container exec -ti <nome_container> /bin/bash

# executar comandos no container
docker container exec -ti <nome_container> <comando>
exemplos: ifconfig, ping , bash e etc

# remover container
docker container rm -f <nome_container>

# mapear porta do container
docker container run -p <porta_externa-8080>:<porta_interna-80> <nome_imagem> 
(Container estará acessível pela porta 8080, ex: http://localhost:8080, mas internamente estará apontando para a porta 80)

# mapear volumes no container
docker container run -v </caminho_pasta>:</caminho_interno_container>

# exibir logs do container
docker container logs -f <nome_container>

# Remover recursos e dados sem uso 
    - all stopped containers
    - all networks not used by at least one container
    - all images without at least one container associated to them
    - all build cache
docker system prune -a

# ip padrão da máquina
172.17.0.x

Tipos de rede do docker

- None Network (Sem acesso a rede, exemplo: para serviços interno)
- Bridge Network (Padrão) (Máquinas com interface de redes que usam uma ponte para se conectar ao host da rede)
- Host Network (Máquinas com interface de redes que conectando-se diretamente ao host da rede)
- Overlay Network (Swarm) (Para containers clusterizados)

# exibir redes disponiveis
docker network ls

# ver informações da rede
docker network inspect <nome_da_rede>

# criar uma rede
docker network create --drive bridge <nome_nova_rede>

# remover uma rede
docker network rm <nome_rede>

# criar containers selecionando a rede:
docker container run -d --name <nome_container> --net <nome_rede> <nome_imagem> <comando>

# adicionar rede a um container
docker container connect <nome_rede> <nome_container>

# remover rede de um container
docker container disconnect <nome_rede> <nome_container>

# Verificar qual o endereço IP do container 
docker inspect <nome_container> | grep "IPAddress"

# Separar os serviços em containers 


# Gerenciar esses containers com uso do docker composer
docker container run -d --name nginx --mount type=bind,source=/home/hercolys/sources/node-mongo-composer/frontend/,target=/usr/share/nginx/html/ -p 80:80 nginx:1.13
docker container run -d --name mongo mongo:3.4
docker container run -d --name node --mount type=bind,source=/home/hercolys/sources/node-mongo-composer/backend/,target=/backend -p 3000:3000 node:8.1 sleep 1000
docker container exec -ti node bash -c "cd /backend && npm i && node app"


# correção de erro ao tentar acessar docker (fedora)
vim /etc/resolv.conf
servename 8.8.8.8
servename 8.8.4.4

systemctl daemon-reload
systemctl restart docker
