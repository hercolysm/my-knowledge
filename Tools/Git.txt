Comandos do GIT


# clonar repositório

git clone https://gitlab.com/USER/app.git
cd app
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master


# criar novo repositório

mkdir app
cd app
echo "# App" >> README.md
git init
git remote add origin https://gitlab.com/USER/app.git
git add README.md
git commit -m "Initial commit"
git push -u origin master


# adicionar repositório de origem

cd app
git remote add origin https://gitlab.com/USER/app.git
git push -u origin --all
git push -u origin --tags



# configurações globais

git config --global user.name "HERCOLYS MORAES ARAÚJO"
git config --global user.email "hercolysm@gmail.com"


# outros comandos

git [--version] [--help] [-C <path>] [-c name=value]
    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
    [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]


# start a working area
    clone      Clone a repository into a new directory
    init       Create an empty Git repository or reinitialize an existing one

# work on the current change
    add        Add file contents to the index
    mv         Move or rename a file, a directory, or a symlink
    reset      Reset current HEAD to the specified state
    rm         Remove files from the working tree and from the index

# examine the history and state
    bisect     Use binary search to find the commit that introduced a bug
    grep       Print lines matching a pattern
    log        Show commit logs
    show       Show various types of objects
    status     Show the working tree status

# grow, mark and tweak your common history
    branch     List, create, or delete branches
    checkout   Switch branches or restore working tree files
    commit     Record changes to the repository
    diff       Show changes between commits, commit and working tree, etc
    merge      Join two or more development histories together
    rebase     Reapply commits on top of another base tip
    tag        Create, list, delete or verify a tag object signed with GPG

# collaborate
    fetch      Download objects and refs from another repository
    pull       Fetch from and integrate with another repository or a local branch
    push       Update remote refs along with associated objects


# list available subcommands and some
    git help -a
    git help -g

# adicionar uma modificação
    git add caminho_para_o_arquivo
    
# fazer um commit simples
    git commit -m "Descrição do commit"

# subir o commit para o servidor
    git push origin <nome_branch>
    
# listar commits ('-p' para ver as modificações)
    git log -p

/* trabalhando com branch */

# Criar um novo branch
git branch <nome_branch>

# Listar os branchs
git branch --list

# Selecionar um branch
git checkout <nome_branch>

# Criar e selecionar branch
git checkout -b <nome_branch>

# Fazer merge
git checkout master
git merge <nome_branch>

# Deletar um branch
git branch -d <nome_branch>

# Listar os branchs remotos
git branch -r

# Listar os branchs local e remotos
git branch -a

# Deletar um branch remoto
git branch <nome_origin> <nome_branch> --delete

# Sincronizar com os novos branch do remoto
git fetch
git checkout <nome_branch>
git pull origin <nome_branch>

# Limpar cache (remove alterações)
git rm -r --cached .
git add .
git commit -m "fixed untracked files"

# Resetar commits
git reset --hard HEAD~1

# listar origin
git remote -v

# Adicionar origin
git remote add origin http://192.168.1.1/user/projeto.git

# Remover origin
git remote rm origin

# Forçar (fatal: refusing to merge unrelated histories)
git pull origin branch --allow-unrelated-histories

# resetar um 'add'
git reset caminho_para_o_arquivo

# reverter o commit anterior
git revert HEAD

# reverter commits
git revert -m 1 dd8d6f587fa24327d5f5afd6fa8c3e604189c8d4> (não testado)

# armazenar senha não criptografada no disco
git config credential.helper store

# remover as credencias salvas
git config --local --unset credential.helper

# esconder as alterações
git stash

# listar as alterações armazenadas
git stash list

# inspecionas as alterações armazenadas
git stash show

# restaurar as modificações
git stash pop 0
git stash apply

# exemplos de nomes de branchs
change/ajuste-tela-inicial
feature/add-novo-campo
test/geracao-relatorios
bugfix/correcao-login

Resolver conflito localmente:

Step 1. Fetch and check out the branch for this merge request

git fetch origin
git checkout -b release origin/release

Step 2. Review the changes locally

Step 3. Merge the branch and fix any conflicts that come up

git fetch origin
git checkout origin/master
git merge --no-ff release

Step 4. Push the result of the merge to GitLab

git push origin HEAD:master

A partir de 13 de agosto de 2021, o GitHub não está mais aceitando senhas de contas ao autenticar operações do Git. Você precisa adicionar um PAT (Token de Acesso Pessoal)
https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to

Nova autenticação no linux
- Configurar nome e e-mail 
- Digitar o login 
- Digitar na senha o token gerado nas configurações de desenvolvedor 
