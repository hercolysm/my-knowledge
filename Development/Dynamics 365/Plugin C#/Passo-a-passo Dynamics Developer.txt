Dynamics 365 Extensions: Plug-Ins

Integrando .NET C# com o Dynamics 365

Link: https://learn.microsoft.com/pt-br/training/modules/extend-plug-ins/exercise

Requisitos:
    Conhecimento básico de C# 
    Conhecimento básico de .NET Framework (Versão recomendada para o Dynamics - v4.7.1)
    Instância Dynamics 365
    Visual Studio
    CRM SDK Tools (Plugin Registration Tool)

- Abrir Microsoft Visual Studio
- Criar solução 'HMA'
    - Criar projeto 'Biblioteca de Classes (.NET Framework)' 
        Versão .NET Framework 4.7.1
        Nome do projeto 'D365Extensions'
    - Clicar com btn direito no projeto -> Gerenciar Pacotes do NuGet
        - Procurar e instalar pacote 'Microsoft.CrmSdk.CoreAssemblies'
    - Desenvolver o código em C# 
    - Assinar Assembly 
        -> Clicar com btn direito no projeto
        -> Propriedades -> Assinatura 
        -> Marcar 'Assinar o assembly'
            -> Criar Chave de Nome Forte 
                - Nome (ChaveAssinaturaAssembly)
                - Senha 

- Criar projeto (via pac)
    pac plugin init -ss

- Abrir Plugin Registration Tool 
    - Clicar em 'Create New Connection'
        - Logar usando acesso 'Office 365'
    - Register -> Register New Assembly 
        - Localizar o Assembly 
    - Clicar com btn direito no Plugin -> Register New Step 
- Ir no Dynamics e realizar o teste
    - Criar uma nova conta (deverá ser criado uma nova task) 

- Adicionar botão no formulário 
    - Acessar o powerapps: https://make.powerapps.com/
    - Selecionar ambiente 
    - Aplicativos -> Localizar aplicativo 
    - Localizar tabela e clicar no 3 pontinhos -> Editar barra de comando 
- Adicionar ação no botão 
    - Solução -> Processos -> Criar 
        Categoria: Ação 
        Entidade: Tabela 
    - Listar ações do ambiente: https://hmadev.crm2.dynamics.com/api/data/v9.1/$metadata
    - Fazer o btn chamar uma função javascript que chame uma ação customizada 
        Link 1: https://blog.magnetismsolutions.com/blog/dominicjarvis/2017/09/18/how-to-trigger-plugins-on-custom-messages-using-actions-in-dynamics-365 
        Link 2: https://carldesouza.com/calling-a-dynamics-365-action-from-javascript-using-xrm-webapi-online-execute/
        Link 3: https://docs.microsoft.com/en-us/power-apps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/execute
    - Testar requisição a action via URL
        https://hmadev.crm2.dynamics.com/api/data/v9.0/accounts(3a93620e-4e1b-ed11-b83e-00224836d774)/Microsoft.Dynamics.CRM.new_PrimeiraAcao

- Habilitar Debug 
    Link: https://docs.microsoft.com/en-us/power-apps/developer/data-platform/tutorial-debug-plug-in?tabs=prt
    - Abrir Plugin Registration Tool 
        - Selecionar step e clicar em 'Install Profiler' 
        - Depois da instalação clicar em 'Start Profiling' 
        (Realizar execução do plugin) 
        - Clicar em 'Debug' 
            - Selecionar no Profile a execução realizada 
            - Selecionar o local do Assembly e o plugin 
    - No visual studio 
        - Adicionar um break point no código 
        - Ir em Debug -> Anexar ao Processo (ctrl + alt + p) 
        - Selecionar o executável do Plugin Registration Tool 
        - Clicar em 'Attach'
    - Ir em Replay Plug-in Execution 
        - Clicar em 'Start Execution' 

Ferramentas: 
    ConfigurationMigration -> Manipulação de dados, clonagem dos dados de produção para dev 
    CoreTools -> CrmSvcUtil -> Criar classe e tabela baseadas no ambiente do Dynamics
    PluginRegistration -> Ferramenta que registra o plugin e os steps no Dynamics 
    PackageDeployment

Download tools 
    https://docs.microsoft.com/en-us/power-apps/developer/data-platform/download-tools-nuget

Seguindo adiante:
    Estilos de Programação (i.e Early Bound vs. Late Bound [https://docs.microsoft.com/en-us/powerapps/developer/data-platform/org-service/early-bound-programming])
    Melhores Práticas de Design (https://docs.microsoft.com/en-us/powerapps/developer/data-platform/best-practices/business-logic/)
    Testes de Unidade (cf. Microsoft.Xrm.Sdk.Fakes)
    XRMToolBox (o canivete suíço do desenvolvedor Dynamics 365)
    Integrando D365 com Azure (e.g Function Apps)
    Gerenciomento de versão e ciclo de vida da aplicação (c.f ALM e DevOps)
